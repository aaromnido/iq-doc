openapi: 3.0.3
info:
  title: Inspiration-Q Index Tracking API
  description: |-
    This is the Index Tracking API definition, developed by Inspiration-Q.
    
    More information at [https://www.inspiration-q.com](https://www.inspiration-q.com/).
    
  contact:
    email: support@inspiration-q.com
  version: 1.0.0

externalDocs:
  description: Inspiration-Q website
  url: https://www.inspiration-q.com/

servers:
  - url: https://www.inspiration-q.com/api/v1
    description: Production server

tags:
  - name: iQ-Finance
    description: Financial solutions

paths:
  /iq-finance/index-tracking:
    post:
      security:
          - ApiKeyAuth: []
      tags:
        - iQ-Finance
      summary: Create a new Index Tracking computation.
      description: Create a new Index Tracking computation.
      operationId: addIndexTrackingOperation
      requestBody:
        description: Create a IndexTracking computation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexTracking'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputationResult'
        '400':
          description: Invalid input
        '422':
          description: Validation exception

  /iq-finance/index-tracking/{indexTrackingComputationId}:
    get:
      security:
        - ApiKeyAuth: []
      tags:
        - iQ-Finance
      summary: Find Index Tracking computation by ID
      description: Returns a single Index Tracking computation.
      operationId: getIndexTrackingComputationById
      parameters:
        - name: indexTrackingComputationId
          in: path
          description: ID of the Index Tracking computation to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputationResult'
        '400':
          description: Invalid computation ID supplied
        '404':
          description: Computation not found


components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Ocp-Apim-Subscription-Key
  schemas:
    ComputationResult:
      type: object
      properties:
        computationId:
          type: string
          description: Identifier of the computation. This ID is generated by the Inspiration-Q server.
          example: 28476298467297626
        type:
          type: string
          description: Type of computation launched.
        description:
          type: string
          description: Description of the computation launched, to help the user to identify the use case.
          example: QUBO computation for the use case 001. 
        status:
          type: string
          enum: [Pending, Computing, Failed, Ok]
          description: "Pending: the computation is waiting to start. Computing: the computation is running. Failed: the computation has failed. Ok: the computation has finished properly and the solution is ready."
          example: Ok
        error_description:
          type: string
          example: "Validation: The input utility matrix is not a square matrix."
          description: String with the description of any error that resulted in the computation. 
        progress:
          type: integer
          format: Int32
          description: Progress percentage of the computation.
          example: 76
        computationTime:
          type: number
          description: Time spent on computing the result in seconds.
          example: 647
        computationStartTime:
          type: string
          format: date-time
          description: Datetime when computation begins.
          example: "2017-07-21T17:32:28Z"
        computationStoreTime:
          type: string
          format: date-time
          description: Datetime when computation is stored in the server.
          example: "2017-07-21T17:32:28Z"
        solution:
          type: array
          items:
            type: number
          example: [0, 1]
          description: Optimal solution found for the problem.
        named_solution:
          type: object
          additionalProperties:
            type: number
          example: {"alpha": 0.2, "beta": 0.8}
          description: Optimal solution found for the problem with an identifier for each of the members of the solution.
        cost:
          type: number
          description: Optional. Minimum value found for the cost function.
        weights:
          type: array
          items:
            type: number
          description: Optional. Weights that corresponds to the solution.

    IndexTracking:
      required:
        - assets_utility_matrix
        - assets_to_benchmark_utility_vector
        - portfolio_size
        - asset_names
      type: object
      properties:
        description:
          type: string
          description: A brief description of the portfolio that will be obtained.
          example: SP500 tracker, size=60
        assets_utility_matrix:
          type: array
          description: The quadratic utility matrix of the assets in the look back window. For example, it could be a covariance matrix or a quadratic distance matrix.
          items:
            type: array
            items:
              type: number
          example: [ [1.23, 2.13], [3.13, 4.09] ]
        assets_to_benchmark_utility_vector:
          type: array
          description: The quadratic utility vector between the assets and the benchmark in the look back window. For example, it could be a covariance matrix or a quadratic distance matrix.
          items:
            type: number
          example: [1.31, 33.541]
        asset_names:
          type: array
          description: List with names or identifiers of the assets used in the input covariances.
          items:
            type: string
          example: [ticker_a, ticker_b]
        portfolio_size:
          type: integer
          description: The number of assets inside the portfolio.
          format: int32
          minimum: 1
          maximum: 2047
        minimum_weight:
          type: number
          description: The minimum allowed weight for each asset included in the portfolio, from 0 to 1. If not provided defaults to 0.
          example: 0.25
        maximum_weight:
          type: number
          description: The maximum allowed weight for each asset included in the portfolio, from 0 to 1. If not provided defaults to 1.
          example: 7.25
        linear_constraints_matrix:
          type: array
          description: Matrix of linear constraints. Each row corresponds to one constraint. Constraints can be both equalities and inequalities. 
          items:
            type: array
            items:
              type: number
          example: [ [1.23, 2.13], [3.13, 4.09] ]
        lower_bounds_vector:
          type: array
          description: Vector of lower bounds for each linear constraint.
          items:
            type: number
          example: [-1232, -23415]
        upper_bounds_vector:
          type: array
          description: Vector of upper bounds for each linear constraint.
          items:
            type: number
          example: [2345, 1233]
        previous_portfolio:
          description: If given, a map or dictionary with the name or identifier of the asset and the weights in the previous portfolio. The weights of the previous portfolio whose sum is equal to 1.
          type: object
          additionalProperties:
            type: number
          example: {"ticker_a": 0.2, "ticker_b": 0.8}
        max_companies_rotation:
          type: integer
          description: If given a previous portfolio, the maximum number of assets that can change from the previous portfolio to the newly computed one.
          example: 2
        max_sales_rotation:
          type: number
          description: If given a previous portfolio, the maximum percentage (from 0 to 1) that can be sold from the previous portfolio to the newly computed one.
          example: 0.8
        sectorial_weights:
          description: If given, a map or dictionary with the name of the sector and the weight that is should have in the requested portfolio. The sum of weights must be 1.
          type: object
          additionalProperties:
            type: number
          example: {"technology": 0.6, "energy": 0.4}
        sectorial_distribution:
          description: A map or dictionary with the name or identifier of the asset and the sector to which it belongs.
          type: object
          additionalProperties:
            type: string
          example: {"ticker_a": "technology", "ticker_b": "energy"}
        sectorial_weight_tolerance:
          description: The maximum allowed absolute deviation from the sectorial weights in the solution.
          type: number
          example: 0.05
        sum_of_portfolio_weights:
          description: The expected sum of the output weights. Example, if the portfolio weights should sum up to 85%, then this parameter should be 0.85.
          type: number
          example: 1.0
        random_number_generator_seed:
          type: integer
          description: Seed for the random number generator. Must be an integer greater or equal than 0.
          format: int32
          example: 1334